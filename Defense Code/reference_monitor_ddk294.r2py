"""
This security layer inadequately handles parity for files in RepyV2.


Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
class RepyParityError(Exception):
    pass

class EvenParityFile():
  def __init__(self,filename,create):

  # globals
    mycontext['debug'] = False
    mycontext['stoplock'] = createlock()
    mycontext['threadName'] = getthreadname()

    # local (per object) reference to the underlying file
    self.fn = filename
    self.file = openfile(self.fn,create)

  def writeat(self,data,offset):
    mycontext['stoplock'].acquire(True)
    if type(data) is None or not isinstance(offset, int):
      raise RepyParityError("Wrong data type has been input")
    
    validData = 0
    startByte = 0
    endByte = 8
    oddCount = 0

    # check offset
    if offset < 0:
      raise RepyParityError("Negative offset")
    elif offset > len(self.file.readat(None, 0)):
      raise SeekPastEndOfFileError("Past bounds of max offset")

    # check the parity of the data written

    if len(self.file.readat(None, 0)) == 0:
      stringarray = []
      thisdata = data
      lastByte = len(thisdata)
    
      if len(thisdata) < 8:
        validData = 1
      
      if validData == 0:
        while endByte <= lastByte:
          eightbytesequence = thisdata[startByte:endByte]
          if len(eightbytesequence) < 8:
            stringarray.append(eightbytesequence)
            break
          for thisByte in eightbytesequence:
            # increments odd parity counter
            if ord(thisByte) % 2 == 1:
              oddCount += 1
          if oddCount % 2 == 1:
            raise RepyParityError("Non-even parity write to file")
          # append it to the array to write later
          stringarray.append(eightbytesequence)
  
          if endByte == lastByte:
            break
          elif lastByte - endByte < 8:
            startByte += 8
            endByte = lastByte
          else:
            endByte += 8
            startByte += 8

      validData = 1
      finalString = "".join(stringarray)

      if validData == 1:
        if len(thisdata) < 8:
          self.file.writeat(data, 0)
        else:
          self.file.writeat(finalString, 0)


    else:
      popLength = 0
      dataFromFile = self.file.readat(None, 0)
      if len(dataFromFile) > offset and len(dataFromFile) >= len(data):
        popLength = len(dataFromFile) - offset
        if popLength > len(data):
          popLength = len(data)
      elif len(dataFromFile) > offset and len(dataFromFile) < len(data):
        popLength = len(dataFromFile) - offset
      elif len(dataFromFile) == offset:
        popLength = 0
      elif len(dataFromFile) < offset:
        raise SeekPastEndOfFileError("Past bounds of max offset")
      dataFromFile = list(dataFromFile)
      if popLength > 0:
        for i in range(offset, offset + popLength):
          dataFromFile.pop(offset)
      dataFromFile.insert(offset, data)
      testString = "".join(dataFromFile)
      
      thisdata = testString
      lastByte = len(thisdata)
        
      if len(thisdata) < 8:
        validData = 1

      if validData == 0:
        while endByte <= lastByte:
          eightbytesequence = thisdata[startByte:endByte]
          if len(eightbytesequence) < 8:
            break
          for thisByte in eightbytesequence:
            # increments odd parity counter
            if ord(thisByte) % 2 == 1:
              oddCount += 1
          if oddCount % 2 == 1:
              raise RepyParityError("Non-even parity write to file")  
          if endByte == lastByte:
            break
          elif lastByte - endByte < 8:
            startByte += 8
            endByte = lastByte
          else:
            endByte += 8
            startByte += 8
    
      validData = 1      
      if validData == 1:
        self.file.writeat(thisdata, 0)    
    mycontext['stoplock'].release()


  
  def readat(self,bytes,offset):
    # Read from the file using the sandbox's readat...
    return self.file.readat(bytes,offset)


  def close(self):
    self.file.close()


def parityopenfile(filename, create):
  return EvenParityFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":EvenParityFile,
                "name":"EvenParityFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":EvenParityFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":EvenParityFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":EvenParityFile.close}
           }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc","args":(str,bool),"exceptions":Exception,"return":sec_file_def,"target":parityopenfile}
CHILD_CONTEXT_DEF["RepyParityError"] = {"type":"any","target":RepyParityError}
# Execute the user code
secure_dispatch_module()
